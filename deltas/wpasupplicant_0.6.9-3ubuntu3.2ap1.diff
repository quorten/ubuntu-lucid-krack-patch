Index: wpasupplicant-0.6.9/debian/changelog
===================================================================
--- wpasupplicant-0.6.9.orig/debian/changelog	2017-10-22 23:23:30.000000000 -0500
+++ wpasupplicant-0.6.9/debian/changelog	2017-10-22 23:23:51.342752995 -0500
@@ -1,3 +1,9 @@
+wpasupplicant (0.6.9-3ubuntu3.2ap1) lucid-security; urgency=low
+
+  * Apply backport patches to fix KRACK vulnerability.
+
+ -- Andrew <andrew@localhost>  Sun, 22 Oct 2017 16:09:09 -0500
+
 wpasupplicant (0.6.9-3ubuntu3.2) lucid-security; urgency=medium
 
   * SECURITY UPDATE: arbitrary command execution via unsanitized string
Index: wpasupplicant-0.6.9/debian/patches/2017-1/0002-Prevent-reinstallation-of-an-already-in-use-group-ke.patch
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ wpasupplicant-0.6.9/debian/patches/2017-1/0002-Prevent-reinstallation-of-an-already-in-use-group-ke.patch	2017-10-22 23:23:51.342752995 -0500
@@ -0,0 +1,214 @@
+This patch has been modified for compatibility with `wpasupplicant'
+from Ubuntu 10.04 LTS.
+
+Original message header below.
+===================================================================
+
+From d703108d74fb1bc98f48490c513c7061dd8fbe9e Mon Sep 17 00:00:00 2001
+From: Mathy Vanhoef <Mathy.Vanhoef@cs.kuleuven.be>
+Date: Wed, 12 Jul 2017 16:03:24 +0200
+Subject: [PATCH 02/10] Prevent reinstallation of an already in-use group key
+
+Track the current GTK and IGTK that is in use and when receiving a
+(possibly retransmitted) Group Message 1 or WNM-Sleep Mode Response, do
+not install the given key if it is already in use. This prevents an
+attacker from trying to trick the client into resetting or lowering the
+sequence counter associated to the group key.
+
+Signed-off-by: Mathy Vanhoef <Mathy.Vanhoef@cs.kuleuven.be>
+---
+ src/common/wpa_common.h |  11 +++++
+ src/rsn_supp/wpa.c      | 116 ++++++++++++++++++++++++++++++------------------
+ src/rsn_supp/wpa_i.h    |   4 ++
+ 3 files changed, 87 insertions(+), 44 deletions(-)
+
+diff -Naurp wpasupplicant-0.6.9.orig/src/common/wpa_common.h wpasupplicant-0.6.9/src/common/wpa_common.h
+--- wpasupplicant-0.6.9.orig/src/common/wpa_common.h	2017-10-22 15:59:15.163356687 -0500
++++ wpasupplicant-0.6.9/src/common/wpa_common.h	2017-10-22 15:57:05.605249918 -0500
+@@ -105,6 +105,7 @@
+ 
+ #ifdef CONFIG_IEEE80211W
+ #define WPA_IGTK_LEN 16
++#define WPA_IGTK_MAX_LEN 32
+ #endif /* CONFIG_IEEE80211W */
+ 
+ 
+@@ -177,6 +178,17 @@ struct wpa_ptk {
+ 	} u;
+ } STRUCT_PACKED;
+ 
++struct wpa_gtk {
++	u8 gtk[WPA_GTK_MAX_LEN];
++	size_t gtk_len;
++};
++
++#ifdef CONFIG_IEEE80211W
++struct wpa_igtk {
++	u8 igtk[WPA_IGTK_MAX_LEN];
++	size_t igtk_len;
++};
++#endif /* CONFIG_IEEE80211W */
+ 
+ /* WPA IE version 1
+  * 00-50-f2:1 (OUI:OUI type)
+diff -Naurp wpasupplicant-0.6.9.orig/src/rsn_supp/wpa.c wpasupplicant-0.6.9/src/rsn_supp/wpa.c
+--- wpasupplicant-0.6.9.orig/src/rsn_supp/wpa.c	2017-10-22 15:59:15.163356687 -0500
++++ wpasupplicant-0.6.9/src/rsn_supp/wpa.c	2017-10-22 15:59:39.605252962 -0500
+@@ -621,6 +621,15 @@ static int wpa_supplicant_install_gtk(st
+ 	const u8 *_gtk = gd->gtk;
+ 	u8 gtk_buf[32];
+ 
++	/* Detect possible key reinstallation */
++	if (sm->gtk.gtk_len == (size_t) gd->gtk_len &&
++	    os_memcmp(sm->gtk.gtk, gd->gtk, sm->gtk.gtk_len) == 0) {
++		wpa_printf(MSG_DEBUG,
++			"WPA: Not reinstalling already in-use GTK to the driver (keyidx=%d tx=%d len=%d)",
++			gd->keyidx, gd->tx, gd->gtk_len);
++		return 0;
++	}
++
+ 	wpa_hexdump_key(MSG_DEBUG, "WPA: Group Key", gd->gtk, gd->gtk_len);
+ 	wpa_printf(MSG_DEBUG, "WPA: Installing GTK to the driver "
+ 		   "(keyidx=%d tx=%d len=%d).", gd->keyidx, gd->tx,
+@@ -650,6 +659,10 @@ static int wpa_supplicant_install_gtk(st
+ 			   "the driver.");
+ 		return -1;
+ 	}
++ 	os_memset(gtk_buf, 0, sizeof(gtk_buf));
++
++	sm->gtk.gtk_len = gd->gtk_len;
++	os_memcpy(sm->gtk.gtk, gd->gtk, sm->gtk.gtk_len);
+ 
+ 	return 0;
+ }
+@@ -721,6 +734,47 @@ static int wpa_supplicant_pairwise_gtk(s
+ }
+ 
+ 
++#ifdef CONFIG_IEEE80211W
++static int wpa_supplicant_install_igtk(struct wpa_sm *sm,
++				       const struct wpa_igtk_kde *igtk)
++{
++	u16 keyidx = WPA_GET_LE16(igtk->keyid);
++
++	/* Detect possible key reinstallation */
++	if (sm->igtk.igtk_len == WPA_IGTK_LEN &&
++	    os_memcmp(sm->igtk.igtk, igtk->igtk, sm->igtk.igtk_len) == 0) {
++		wpa_printf(MSG_DEBUG,
++			"WPA: Not reinstalling already in-use IGTK to the driver (keyidx=%d)",
++			keyidx);
++		return  0;
++	}
++
++	wpa_printf(MSG_DEBUG,
++		"WPA: IGTK keyid %d pn %02x%02x%02x%02x%02x%02x",
++		keyidx, MAC2STR(igtk->pn));
++	wpa_hexdump_key(MSG_DEBUG, "WPA: IGTK", igtk->igtk, WPA_IGTK_LEN);
++	if (keyidx > 4095) {
++		wpa_msg(sm->ctx->ctx, MSG_WARNING,
++			"WPA: Invalid IGTK KeyID %d", keyidx);
++		return -1;
++	}
++	if (wpa_sm_set_key(sm, WPA_ALG_IGTK,
++			   (u8 *) "\xff\xff\xff\xff\xff\xff",
++			   keyidx, 0, igtk->pn, sizeof(igtk->pn),
++			   igtk->igtk, WPA_IGTK_LEN) < 0) {
++		wpa_msg(sm->ctx->ctx, MSG_WARNING,
++			"WPA: Failed to configure IGTK to the driver");
++		return -1;
++	}
++
++	sm->igtk.igtk_len = WPA_IGTK_LEN;
++	os_memcpy(sm->igtk.igtk, igtk->igtk, sm->igtk.igtk_len);
++
++	return 0;
++}
++#endif /* CONFIG_IEEE80211W */
++
++
+ static int ieee80211w_set_keys(struct wpa_sm *sm,
+ 			       struct wpa_eapol_ie_parse *ie)
+ {
+@@ -730,29 +784,13 @@ static int ieee80211w_set_keys(struct wp
+ 
+ 	if (ie->igtk) {
+ 		const struct wpa_igtk_kde *igtk;
+-		u16 keyidx;
++
+ 		if (ie->igtk_len != sizeof(*igtk))
+ 			return -1;
++
+ 		igtk = (const struct wpa_igtk_kde *) ie->igtk;
+-		keyidx = WPA_GET_LE16(igtk->keyid);
+-		wpa_printf(MSG_DEBUG, "WPA: IGTK keyid %d "
+-			   "pn %02x%02x%02x%02x%02x%02x",
+-			   keyidx, MAC2STR(igtk->pn));
+-		wpa_hexdump_key(MSG_DEBUG, "WPA: IGTK",
+-				igtk->igtk, WPA_IGTK_LEN);
+-		if (keyidx > 4095) {
+-			wpa_printf(MSG_WARNING, "WPA: Invalid IGTK KeyID %d",
+-				   keyidx);
+-			return -1;
+-		}
+-		if (wpa_sm_set_key(sm, WPA_ALG_IGTK,
+-				   (u8 *) "\xff\xff\xff\xff\xff\xff",
+-				   keyidx, 0, igtk->pn, sizeof(igtk->pn),
+-				   igtk->igtk, WPA_IGTK_LEN) < 0) {
+-			wpa_printf(MSG_WARNING, "WPA: Failed to configure IGTK"
+-				   " to the driver");
++		if (wpa_supplicant_install_igtk(sm, igtk) < 0)
+ 			return -1;
+-		}
+ 	}
+ 
+ 	return 0;
+@@ -1883,7 +1921,7 @@ void wpa_sm_deinit(struct wpa_sm *sm)
+  */
+ void wpa_sm_notify_assoc(struct wpa_sm *sm, const u8 *bssid)
+ {
+-	int clear_ptk = 1;
++	int clear_keys = 1;
+ 
+ 	if (sm == NULL)
+ 		return;
+@@ -1903,18 +1941,24 @@ void wpa_sm_notify_assoc(struct wpa_sm *
+ 		/* Prepare for the next transition */
+ 		wpa_ft_prepare_auth_request(sm);
+ 
+-		clear_ptk = 0;
++		clear_keys = 0;
+ 	}
+ #endif /* CONFIG_IEEE80211R */
+ 
+-	if (clear_ptk) {
++	if (clear_keys) {
+ 		/*
+ 		 * IEEE 802.11, 8.4.10: Delete PTK SA on (re)association if
+ 		 * this is not part of a Fast BSS Transition.
+ 		 */
+ 		wpa_printf(MSG_DEBUG, "WPA: Clear old PTK");
+ 		sm->ptk_set = 0;
++ 		os_memset(&sm->ptk, 0, sizeof(sm->ptk));
+ 		sm->tptk_set = 0;
++ 		os_memset(&sm->tptk, 0, sizeof(sm->tptk));
++		os_memset(&sm->gtk, 0, sizeof(sm->gtk));
++#ifdef CONFIG_IEEE80211W
++		os_memset(&sm->igtk, 0, sizeof(sm->igtk));
++#endif /* CONFIG_IEEE80211W */
+ 	}
+ }
+ 
+diff -Naurp wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_i.h wpasupplicant-0.6.9/src/rsn_supp/wpa_i.h
+--- wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_i.h	2017-10-22 15:59:15.163356687 -0500
++++ wpasupplicant-0.6.9/src/rsn_supp/wpa_i.h	2017-10-22 15:57:05.605249918 -0500
+@@ -33,6 +33,10 @@ struct wpa_sm {
+ 	u8 rx_replay_counter[WPA_REPLAY_COUNTER_LEN];
+ 	int rx_replay_counter_set;
+ 	u8 request_counter[WPA_REPLAY_COUNTER_LEN];
++	struct wpa_gtk gtk;
++#ifdef CONFIG_IEEE80211W
++	struct wpa_igtk igtk;
++#endif /* CONFIG_IEEE80211W */
+ 
+ 	struct eapol_sm *eapol; /* EAPOL state machine from upper level code */
+ 
Index: wpasupplicant-0.6.9/debian/patches/2017-1/0009-FT-Do-not-allow-multiple-Reassociation-Response-fram.patch
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ wpasupplicant-0.6.9/debian/patches/2017-1/0009-FT-Do-not-allow-multiple-Reassociation-Response-fram.patch	2017-10-22 23:24:21.761048442 -0500
@@ -0,0 +1,82 @@
+This patch has been modified for compatibility with `wpasupplicant'
+from Ubuntu 10.04 LTS.
+
+Original message header below.
+===================================================================
+
+From dda06c8255d189bc951d81c67d29c6a378a705ba Mon Sep 17 00:00:00 2001
+From: Jouni Malinen <j@w1.fi>
+Date: Fri, 22 Sep 2017 12:06:37 +0300
+Subject: [PATCH 09/10] FT: Do not allow multiple Reassociation Response frames
+
+The driver is expected to not report a second association event without
+the station having explicitly request a new association. As such, this
+case should not be reachable. However, since reconfiguring the same
+pairwise or group keys to the driver could result in nonce reuse issues,
+be extra careful here and do an additional state check to avoid this
+even if the local driver ends up somehow accepting an unexpected
+Reassociation Response frame.
+
+Signed-off-by: Jouni Malinen <j@w1.fi>
+---
+ src/rsn_supp/wpa.c    | 3 +++
+ src/rsn_supp/wpa_ft.c | 8 ++++++++
+ src/rsn_supp/wpa_i.h  | 1 +
+ 3 files changed, 12 insertions(+)
+
+diff -Naurp wpasupplicant-0.6.9.orig/src/rsn_supp/wpa.c wpasupplicant-0.6.9/src/rsn_supp/wpa.c
+--- wpasupplicant-0.6.9.orig/src/rsn_supp/wpa.c	2017-10-22 23:18:52.770270950 -0500
++++ wpasupplicant-0.6.9/src/rsn_supp/wpa.c	2017-10-22 23:17:36.302271923 -0500
+@@ -1975,6 +1975,9 @@ void wpa_sm_notify_disassoc(struct wpa_s
+ 	rsn_preauth_deinit(sm);
+ 	if (wpa_sm_get_state(sm) == WPA_4WAY_HANDSHAKE)
+ 		sm->dot11RSNA4WayHandshakeFailures++;
++#ifdef CONFIG_IEEE80211R
++	sm->ft_reassoc_completed = 0;
++#endif /* CONFIG_IEEE80211R */
+ }
+ 
+ 
+diff -Naurp wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_ft.c wpasupplicant-0.6.9/src/rsn_supp/wpa_ft.c
+--- wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_ft.c	2017-10-22 23:18:52.770270950 -0500
++++ wpasupplicant-0.6.9/src/rsn_supp/wpa_ft.c	2017-10-22 23:17:36.302271923 -0500
+@@ -128,6 +128,7 @@ static u8 * wpa_ft_gen_req_ies(struct wp
+ 	u16 capab;
+ 
+ 	sm->ft_completed = 0;
++	sm->ft_reassoc_completed = 0;
+ 
+ 	buf_len = 2 + sizeof(struct rsn_mdie) + 2 + sizeof(struct rsn_ftie) +
+ 		2 + sm->r0kh_id_len + 100;
+@@ -746,6 +747,11 @@ int wpa_ft_validate_reassoc_resp(struct 
+ 		return -1;
+ 	}
+ 
++	if (sm->ft_reassoc_completed) {
++		wpa_printf(MSG_DEBUG, "FT: Reassociation has already been completed for this FT protocol instance - ignore unexpected retransmission");
++		return 0;
++	}
++
+ 	if (wpa_ft_parse_ies(ies, ies_len, &parse) < 0) {
+ 		wpa_printf(MSG_DEBUG, "FT: Failed to parse IEs");
+ 		return -1;
+@@ -825,6 +831,8 @@ int wpa_ft_validate_reassoc_resp(struct 
+ 		return -1;
+ 	}
+ 
++	sm->ft_reassoc_completed = 1;
++
+ 	if (wpa_ft_process_gtk_subelem(sm, parse.gtk, parse.gtk_len) < 0)
+ 		return -1;
+ 
+diff -Naurp wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_i.h wpasupplicant-0.6.9/src/rsn_supp/wpa_i.h
+--- wpasupplicant-0.6.9.orig/src/rsn_supp/wpa_i.h	2017-10-22 23:18:52.770270950 -0500
++++ wpasupplicant-0.6.9/src/rsn_supp/wpa_i.h	2017-10-22 23:17:36.302271923 -0500
+@@ -107,6 +107,7 @@ struct wpa_sm {
+ 	size_t r0kh_id_len;
+ 	u8 r1kh_id[FT_R1KH_ID_LEN];
+ 	int ft_completed;
++	int ft_reassoc_completed;
+ 	int over_the_ds_in_progress;
+ 	u8 target_ap[ETH_ALEN]; /* over-the-DS target AP */
+ #endif /* CONFIG_IEEE80211R */
Index: wpasupplicant-0.6.9/debian/patches/series
===================================================================
--- wpasupplicant-0.6.9.orig/debian/patches/series	2017-10-22 23:23:30.000000000 -0500
+++ wpasupplicant-0.6.9/debian/patches/series	2017-10-22 23:23:51.342752995 -0500
@@ -8,3 +8,5 @@
 12_no_syslog_flood.patch
 git_dbus_smartcard_eapol_d719934.patch
 CVE-2014-3686.patch
+2017-1/0002-Prevent-reinstallation-of-an-already-in-use-group-ke.patch
+2017-1/0009-FT-Do-not-allow-multiple-Reassociation-Response-fram.patch
